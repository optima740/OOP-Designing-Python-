# ЗАЛАНИЕ 16.

"""
Возможно подойдет такой пример. У нас есть класс Прямоугольник. Мы хотим получить класс Квадрат. По сути
(даже топологически), мы можем утверждать, что квадрат является прямоугольником (содержит частный случай прямоугольника
при одинаковых значениях длины и высоты). Но в процессе выполнения программы, длина и ширина могут меняться, и в таком
случае квадрат уже не будет квадратом.
Но с другой стороны мы могли бы переопределить конструктор и метод нахождения площади для класса Прямоугольник. Или
использовать базовый класс Фигура, и от него наследовать и Квадрат и Прямоугольник.
"""
"""
Телефон – средство обеспечивающее связь между объектами в пространстве.
Смартфон – является телефоном с рядом других функций. Также можно сказать, что смартфон содержит в себе телефон.
Мы могли бы наследовать класс «смартфон» от класса «телефон», расширив родительский функционал. 
Но также, мы можем использовать класс «мобильное электронное устройство», и включить
в него функционал класса «телефон» (применить композицию, хотя для данного случая, наверное, агрегацию).
"""
# ЗАДАНИЕ 17.
"""
Устройство чтения внешних накопителей – это наш базовый класс. Класс DVD-ROM является наследником нашего 
базового класса. Т. о. класс DVD-ROM переопределит родительские методы, и можно утверждать, что DVD-ROM – 
является устройством чтения внешних накопителей. Также от нашего базового класа мы можем наследовать класс Floppy. 
Тем самым, некий класс "Компьютер" может использовать класс "Устройство чтения внешних накопителей", 
который, в свою очередь, может быть полиморфным объектом (DVD-ROM или Floppy), 
но в рамках одного типа "Устройство чтения внешних накопителей" (отношение “is-a”). 
"""
"""
Также можно привести еще пример. Базовый класс “Пользователь”. От него наследуются классы “Менеджер” и “Водитель”. 
Данные классы наследники специализируют функционал родительского класса. 
Т. о. для системы самообслуживания сотрудников предприятия класс “Пользователь” будет полиморфным (Менеджер или 
Водитель), но оба класса-потомка будут являться подмножеством типа “Пользователь”. (отношение “is-a”) 
"""